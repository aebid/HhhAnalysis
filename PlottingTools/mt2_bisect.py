# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mt2_bisect', [dirname(__file__)])
        except ImportError:
            import _mt2_bisect
            return _mt2_bisect
        if fp is not None:
            try:
                _mod = imp.load_module('_mt2_bisect', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mt2_bisect = swig_import_helper()
    del swig_import_helper
else:
    import _mt2_bisect
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


RELATIVE_PRECISION = _mt2_bisect.RELATIVE_PRECISION
ABSOLUTE_PRECISION = _mt2_bisect.ABSOLUTE_PRECISION
MIN_MASS = _mt2_bisect.MIN_MASS
ZERO_MASS = _mt2_bisect.ZERO_MASS
SCANSTEP = _mt2_bisect.SCANSTEP
class mt2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mt2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mt2, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mt2_bisect.new_mt2()
        try: self.this.append(this)
        except: self.this = this
    def mt2_bisect(self): return _mt2_bisect.mt2_mt2_bisect(self)
    def mt2_massless(self): return _mt2_bisect.mt2_mt2_massless(self)
    def set_momenta(self, *args): return _mt2_bisect.mt2_set_momenta(self, *args)
    def set_mn(self, *args): return _mt2_bisect.mt2_set_mn(self, *args)
    def get_mt2(self): return _mt2_bisect.mt2_get_mt2(self)
    def _print(self): return _mt2_bisect.mt2__print(self)
    __swig_setmethods__["nevt"] = _mt2_bisect.mt2_nevt_set
    __swig_getmethods__["nevt"] = _mt2_bisect.mt2_nevt_get
    if _newclass:nevt = _swig_property(_mt2_bisect.mt2_nevt_get, _mt2_bisect.mt2_nevt_set)
    __swig_destroy__ = _mt2_bisect.delete_mt2
    __del__ = lambda self : None;
mt2_swigregister = _mt2_bisect.mt2_swigregister
mt2_swigregister(mt2)



