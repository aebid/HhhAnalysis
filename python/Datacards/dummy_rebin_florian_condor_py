import os
from array import array
import datetime
from math import sqrt
import numpy.lib.recfunctions as recfunctions
import numpy as np
import ROOT

import sys
sys.argv.append( '-b' )
sys.argv.append( '-q' )

import warnings
warnings.filterwarnings("ignore", category=RuntimeWarning)
##========================================================
## origin hist: x-axis: 0-1.0, 400bins, 0-2000.0, 400bins
##========================================================
def print_xybins(hist):
    hist_nbin_x = hist.GetNbinsX()
    hist_nbin_y = hist.GetNbinsY()
    xaxis = hist.GetXaxis() 
    yaxis = hist.GetYaxis() 
    for i in range(1,hist_nbin_x):
        print("xbin ", i, " lowEdge ", xaxis.GetBinLowEdge(i))
    print("xbin ", hist_nbin_x, " UpEdge ", xaxis.GetBinUpEdge(hist_nbin_x))
    for i in range(1,hist_nbin_y):
        print("ybin ", i, " lowEdge ", yaxis.GetBinLowEdge(i))
    print("ybin ", i, " UpEdge ", yaxis.GetBinUpEdge(hist_nbin_y))

    for i in range(1,hist_nbin_x+1):
        for j in range(1,hist_nbin_y+1):
            print("binx ",i," biny ",j, " bincontent ", hist.GetBinContent(i,j), " binerror ", hist.GetBinError(i,j))

def generateHMEbins(mass, version=0):
    lowM = 250.0; highM = 1250.0
    xbins = [lowM]
    x = lowM
    step = 25.0 
    if mass >= 400 and mass < 500:
        step = 30.0
    elif mass>=500 and mass < 700:
        step = 40.0
    elif mass>=700:
        step = 50.0
    step = step + 10*version
    gap1 = 50 + mass*.1 #120.0
    gap2 = 50 + mass*.2 #200.0
    gap3 = 60 + mass*.3 #
    while x <= highM-150.0:
        if abs(x-mass) > mass:
            x = x+100.0
            xbins.append(x)
        elif abs(x-mass)<= gap2 and abs(x-mass)>gap1:
            x = x+step*1.6
            xbins.append(x)
        elif abs(x-mass)> gap3:
            x = x+step*3
            xbins.append(x)
        #elif abs(x-mass)> 200.:
        #    x = x+step*2.5
        #    xbins.append(x)
        else:
            x = x+step
            xbins.append(x)
    if mass<800:
        xbins = xbins[:-1]
    xbins.append(highM)
    print("Benchmark ", mass , " v ", version, " HME mass bins ",xbins)
    return np.asarray(xbins)
    #return xbins


def getBinsArray(hist, ibin=0):
    bins = []
    hist_nbin = None
    xaxis = None
    if ibin == 0:
        hist_nbin = hist.GetNbinsX()
        xaxis = hist.GetXaxis()
    else:
        hist_nbin = hist.GetNbinsY()
        xaxis = hist.GetYaxis()

    for i in range(1, hist_nbin+1):
        bins.append(xaxis.GetBinLowEdge(i))
    bins.append(xaxis.GetBinUpEdge(hist_nbin))
    return np.asarray(bins)


def rebinx(hist, xbins):
    ybins = getBinsArray(hist, 1)
    #print("rebinx, keep ybins ", ybins)
    hist_nbin_x = hist.GetNbinsX()
    #print("rebinx ", len(xbins), " getNbinsX ", hist_nbin_x)
    xaxis = hist.GetXaxis() 
    xmin = xaxis.GetBinLowEdge(1)
    xmax = xaxis.GetBinUpEdge(hist_nbin_x)
    if xmin >= xbins[-1] or xmax <= xbins[0]:
        print("ignore this rebinx since xmin is larger than max of new bins or xmax is smaller than min of new bins")
        return hist
    if xmin  < xbins[0]:
        xbins[0] =  xmin
    if xmax  > xbins[-1]:
        xbins[-1] =  xmax

    newhist = ROOT.TH2F(hist.GetName()+"_rebinx", hist.GetTitle(),  len(xbins)-1, xbins, len(ybins)-1, ybins)
    hist_nbin_y = hist.GetNbinsY()
    klow  = 1
    for i, xlow in enumerate(xbins[:-1]):
        xup = xbins[i+1]
        #print("klow ", klow, " klowEdge ", xaxis.GetBinLowEdge(klow), "new binx ", i, " xlow ", xlow, " xup ", xup)
        for j in range(1, hist_nbin_y+1):
            bincontent = 0.0
            binerr2  = 0.0
            k = klow
            while xaxis.GetBinUpEdge(k) <= xup:
                bincontent +=  hist.GetBinContent(k, j)
                binerr2  += hist.GetBinError(k, j)*hist.GetBinError(k, j)
                k += 1
                #print("mering ", k," for xup ",xup)
            newhist.SetBinContent(i+1, j, bincontent)
            newhist.SetBinError(i+1, j, sqrt(binerr2))
        klow = k

    return newhist


def rebiny(hist, ybins):
    xbins = getBinsArray(hist, 0)
    #print("rebiny, keep xbins ", xbins)
    hist_nbin_y = hist.GetNbinsY()
    xaxis = hist.GetYaxis() 
    ymin = xaxis.GetBinLowEdge(1)
    ymax = xaxis.GetBinUpEdge(hist_nbin_y)
    #print("old bins ymin ",ymin, " ymax ",ymax, " new bins ymin ", ybins[0]," ymax ", ybins[-1])
    if ymin >= ybins[-1] or ymax <= ybins[0]:
        print("ignore this rebiny since xmin is larger than max of new bins or xmax is smaller than min of new bins")
        return hist
    if ymin  < ybins[0]:
        ybins[0] =  ymin
    if ymax  > ybins[-1]:
        ybins[-1] =  ymax

    #print("new ybins used ",ybins)
    newhist = ROOT.TH2F(hist.GetName()+"_rebiny", hist.GetTitle(),  len(xbins)-1, xbins, len(ybins)-1, ybins)
    hist_nbin_x = hist.GetNbinsX()
    klow  = 1
    for i, ylow in enumerate(ybins[:-1]):
        yup = ybins[i+1]
        #print("klow ", klow, " klowEdge ", xaxis.GetBinLowEdge(klow), "new biny ", i, " ylow ", ylow, " yup ", yup)
        for j in range(1, hist_nbin_x+1):
            #print("new biny ", i, " ylow ", xlow, " yup ", xup," binx ", j)
            bincontent = 0.0
            binerr2  = 0.0
            k = klow
            while xaxis.GetBinUpEdge(k) <= yup:
                bincontent +=  hist.GetBinContent(j, k)
                binerr2  += hist.GetBinError(j,k)*hist.GetBinError(j,k)
                k += 1
                #print("mering ", k," for yup ",xup)
            newhist.SetBinContent(j, i+1, bincontent)
            newhist.SetBinError(j, i+1, sqrt(binerr2))
        klow = k

    return newhist

def linearized2D(hist2d, histname):
    binX = hist2d.GetNbinsX()
    binY = hist2d.GetNbinsY()
    xlow = hist2d.GetXaxis().GetBinLowEdge(1)
    xhigh = hist2d.GetXaxis().GetBinUpEdge(binX)
    ##need to update this to unequal binning
    xbins = getBinsArray(hist2d, ibin=0) 
    ybins = getBinsArray(hist2d, ibin=1) 
    #print("2d histogram, xbins ",xbins, " yins ",ybins)
    newbins = [xbins[0]]
    for k in range(binY):
	newbins += [x+k for x in xbins[1:]]
    newbins = np.asarray(newbins) 
    #print("new 1d bins ",len(newbins)-1," expected ", binX*binY," ",newbins)
    #hist1d = ROOT.TH1F(histname, hist2d.GetTitle(), binX*binY, xlow, xlow+(xhigh - xlow)*binY)
    hist1d = ROOT.TH1F(histname, hist2d.GetTitle(), binX*binY-1, newbins)
    for i in range(binX):
        for j in range(binY):
            bincontent = hist2d.GetBinContent(i+1, j+1)
            binerr  = hist2d.GetBinError(i+1, j+1)
            hist1d.SetBinContent(i+1+j*binX, bincontent)
            hist1d.SetBinError(i+1+j*binX, binerr)
    hist1d.SetDirectory(0)
    return hist1d


def rebin_hist2d(hist, xbins, ybins):
    histname = hist.GetName()+"_1d"
    #print_xybins(hist)
    if len(xbins) == 3:
        nbins = xbins[0]; xmin = xbins[1]; xmax =  xbins[2]
        xbins = []
        binwidth = (xmax-xmin)*1.0/nbins
        for i in range(0, nbins+1):
            xbins.append(xmin + i*binwidth)
        xbins = np.asarray(xbins)

    if len(ybins) == 3:
        nbins = ybins[0]; ymin = ybins[1]; ymax =  ybins[2]
        ybins = []
        binwidth = (ymax-ymin)*1.0/nbins
        for i in range(0, nbins+1):
            ybins.append(ymin + i*binwidth)
        ybins = np.asarray(ybins)
    #oldxbins = getBinsArray(hist, ibin=0) 
    #oldybins = getBinsArray(hist, ibin=1) 
    #print("Old xbins", oldxbins, " yins", oldybins)
    #print("New xbins", xbins, " yins", ybins)
    #hist.RebinX(40)
    #hist.RebinY(40)
    hist = rebinx(hist, xbins)
    hist = rebiny(hist, ybins)
    hist = linearized2D(hist, histname) 
    #print_xybins(hist)
    return hist


def rebin_onefile(rootfile, newfile, xbins, ybins):
    rfile = ROOT.TFile(rootfile,"READ") 
    #hist = rfile.Get("ggHH_M_550_hbbhtt")
    keylist = rfile.GetListOfKeys()
    #print("keylist ",keylist)
    if len(keylist) == 0:
        print("no histogram in file ", rootfile)
        return 0

    ihist = 0; maxhist = 1
    histlist = []
    for key in keylist:
        if ihist >= maxhist and maxhist > 0:
            print("only rebins %d histograms now"%maxhist)
            break
        #histlist.append( key.ReadObj().GetName() )
        histlist.append( key.ReadObj())
        ihist += 1

    rfile2 = ROOT.TFile(newfile,"RECREATE") 
    rfile2.cd()
    #directory = rfile2.GetDirectory("")
    for hist in histlist:
        #hist = rfile.Get(histname)
        hist = rebin_hist2d(hist, xbins, ybins)
        hist.SetDirectory(rfile2) 
        #c1 = ROOT.TCanvas("c", "canvas", 800, 800)
        #c1.Clear()
        #hist.Draw("hist")
        #c1.SaveAs(hist.GetName()+"_1d.png")
        hist.Write()

def rebin_onefolder(mass, hmtbin_version, oldfolder, newfolder, xbins, node, runyears):
    print("old folder ", oldfolder, " new folder ", newfolder)
    if not os.path.exists(newfolder):
    	os.makedirs(newfolder)
    allfiles = os.listdir(oldfolder)
    ##datacard_fit_Resonant_HighMass_Graviton_2D_syst_M_550_raw_FR2
    #mass = oldfolder.split("_")[-3]
    ybins = generateHMEbins(int(mass), hmtbin_version)
    for filename in allfiles:
	for year in runyears:
	    if filename.endswith(".root") and node in filename and year in filename:
		rootfile = os.path.join(oldfolder, filename)
		newfilename = filename[:-5]+"_rebin1d.root"
		newfile  = os.path.join(newfolder, newfilename)
		#print("oldfile ", rootfile, " new file ", newfile)
		rebin_onefile(rootfile, newfile, xbins, ybins)
    	
    
xbins= [10,  0.0, 1.0]
#masspoints = [260, 270, 300, 350, 400, 450, 500, 550, 600, 650, 700, 800, 900]
#HMT_bins = [0, 1, 2, 3]
node = "GGF"
mass = int(sys.argv[1])
hmtbin_version = int(sys.argv[2])

folder = None
if mass <= 500:
    folder = "/eos/user/t/tahuang/FR2_Florian/datacard_fit_Resonant_LowMass_Graviton_2D_syst_M_%d_raw_FR2"%mass
else:
    folder = "/eos/user/t/tahuang/FR2_Florian/datacard_fit_Resonant_HighMass_Graviton_2D_syst_M_%d_raw_FR2"%mass
newfolder = folder+"_rebin%HMEv%d"%hmtbin_version
rebin_onefolder(mass, hmtbin_version, folder, newfolder, xbins, node, ["2016", "2017","2018"])


#masspoints = [800]
#HMT_bins=[2]
#node = "resolved2b_GGF"
#for mass in masspoints:
#  for hmtbin_version in HMT_bins:
#    if mass <= 500:
#	folder = "/eos/user/t/tahuang/FR2_Florian/datacard_fit_Resonant_LowMass_Graviton_2D_syst_M_%d_raw_FR2"%mass
#    else:
#	folder = "/eos/user/t/tahuang/FR2_Florian/datacard_fit_Resonant_HighMass_Graviton_2D_syst_M_%d_raw_FR2"%mass
#    newfolder = folder+"_rebin"
#    #rebin_onefolder(mass, hmtbin_version, folder, newfolder, xbins, node, ["2016", "2017","2018"])
#    rebin_onefolder(mass, hmtbin_version, folder, newfolder, xbins, node, ["2018"])
